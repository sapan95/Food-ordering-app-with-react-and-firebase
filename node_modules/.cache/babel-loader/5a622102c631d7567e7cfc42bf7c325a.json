{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\Projects\\\\food ordering app\\\\src\\\\components\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst cartReducer = (state, action) => {\n  const existingItemIndex = state.items.findIndex(item => item.id === action.item.id);\n  let updatedItems = [];\n  let updatedTotalAmount = 0;\n\n  if (action.type === 'ADD') {\n    if (existingItemIndex >= 0) {\n      updatedItems = [...state.items];\n      updatedItems[existingItemIndex].amount = updatedItems[existingItemIndex].amount + action.item.amount;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n  }\n\n  return {\n    items: updatedItems,\n    totalAmount: updatedTotalAmount\n  };\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const defaultContext = {\n    items: [],\n    totalAmount: 0\n  };\n  const [cartState, cartDispatch] = useReducer(cartReducer, defaultContext);\n\n  const addItemHandler = item => {\n    cartDispatch({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemHandler = id => {\n    cartDispatch({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const contextValue = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"+zaaoMX/lUEiKuFis5B1KcHOLLQ=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["E:/React/Projects/food ordering app/src/components/store/CartProvider.js"],"names":["React","useReducer","CartContext","cartReducer","state","action","existingItemIndex","items","findIndex","item","id","updatedItems","updatedTotalAmount","type","amount","concat","totalAmount","price","CartProvider","props","defaultContext","cartState","cartDispatch","addItemHandler","removeItemHandler","contextValue","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,QAAMC,iBAAiB,GAAGF,KAAK,CAACG,KAAN,CAAYC,SAAZ,CAAsBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACI,IAAP,CAAYC,EAAtD,CAA1B;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,kBAAkB,GAAG,CAAzB;;AACA,MAAGP,MAAM,CAACQ,IAAP,KAAgB,KAAnB,EAAyB;AACrB,QAAGP,iBAAiB,IAAI,CAAxB,EAA0B;AACtBK,MAAAA,YAAY,GAAG,CAAC,GAAGP,KAAK,CAACG,KAAV,CAAf;AACAI,MAAAA,YAAY,CAACL,iBAAD,CAAZ,CAAgCQ,MAAhC,GAAyCH,YAAY,CAACL,iBAAD,CAAZ,CAAgCQ,MAAhC,GAAyCT,MAAM,CAACI,IAAP,CAAYK,MAA9F;AACH,KAHD,MAII;AACAH,MAAAA,YAAY,GAAGP,KAAK,CAACG,KAAN,CAAYQ,MAAZ,CAAmBV,MAAM,CAACI,IAA1B,CAAf;AACH;;AACDG,IAAAA,kBAAkB,GAAGR,KAAK,CAACY,WAAN,GAAoBX,MAAM,CAACI,IAAP,CAAYQ,KAAZ,GAAoBZ,MAAM,CAACI,IAAP,CAAYK,MAAzE;AACH;;AACD,SAAO;AAACP,IAAAA,KAAK,EAAEI,YAAR;AAAsBK,IAAAA,WAAW,EAAEJ;AAAnC,GAAP;AACH,CAfD;;AAgBA,MAAMM,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC1B,QAAMC,cAAc,GAAG;AACnBb,IAAAA,KAAK,EAAE,EADY;AAEnBS,IAAAA,WAAW,EAAE;AAFM,GAAvB;AAIA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BrB,UAAU,CAACE,WAAD,EAAciB,cAAd,CAA5C;;AACA,QAAMG,cAAc,GAAGd,IAAI,IAAG;AAC1Ba,IAAAA,YAAY,CAAC;AAACT,MAAAA,IAAI,EAAE,KAAP;AAAcJ,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAZ;AACH,GAFD;;AAGA,QAAMe,iBAAiB,GAAGd,EAAE,IAAG;AAC3BY,IAAAA,YAAY,CAAC;AAACT,MAAAA,IAAI,EAAE,QAAP;AAAiBH,MAAAA,EAAE,EAAEA;AAArB,KAAD,CAAZ;AACH,GAFD;;AAGA,QAAMe,YAAY,GAAG;AACjBlB,IAAAA,KAAK,EAAEc,SAAS,CAACd,KADA;AAEjBS,IAAAA,WAAW,EAAEK,SAAS,CAACL,WAFN;AAGjBU,IAAAA,OAAO,EAAEH,cAHQ;AAIjBI,IAAAA,UAAU,EAAEH;AAJK,GAArB;AAMA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAIC,YAA/B;AAAA,cACKN,KAAK,CAACS;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAxBD;;GAAMV,Y;;KAAAA,Y;AA0BN,eAAeA,YAAf","sourcesContent":["import React, {useReducer} from 'react';\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst cartReducer = (state, action) => {\r\n    const existingItemIndex = state.items.findIndex(item => item.id === action.item.id);\r\n    let updatedItems = [];\r\n    let updatedTotalAmount = 0;\r\n    if(action.type === 'ADD'){\r\n        if(existingItemIndex >= 0){\r\n            updatedItems = [...state.items];\r\n            updatedItems[existingItemIndex].amount = updatedItems[existingItemIndex].amount + action.item.amount;\r\n        }\r\n        else{\r\n            updatedItems = state.items.concat(action.item);\r\n        }        \r\n        updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n    }\r\n    return {items: updatedItems, totalAmount: updatedTotalAmount};\r\n}\r\nconst CartProvider = props => {\r\n    const defaultContext = {\r\n        items: [],\r\n        totalAmount: 0\r\n    }\r\n    const [cartState, cartDispatch] = useReducer(cartReducer, defaultContext);\r\n    const addItemHandler = item =>{\r\n        cartDispatch({type: 'ADD', item: item});\r\n    }\r\n    const removeItemHandler = id =>{\r\n        cartDispatch({type: 'REMOVE', id: id});\r\n    }\r\n    const contextValue = {\r\n        items: cartState.items,\r\n        totalAmount: cartState.totalAmount,\r\n        addItem: addItemHandler,\r\n        removeItem: removeItemHandler\r\n    }\r\n    return(\r\n        <CartContext.Provider value = {contextValue}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    );\r\n\r\n}\r\n\r\nexport default CartProvider"]},"metadata":{},"sourceType":"module"}